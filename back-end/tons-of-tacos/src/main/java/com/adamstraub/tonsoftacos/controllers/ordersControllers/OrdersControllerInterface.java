package com.adamstraub.tonsoftacos.controllers.ordersControllers;
import com.adamstraub.tonsoftacos.dto.businessDto.NewOrder;
import com.adamstraub.tonsoftacos.dto.customerDto.ordersDto.OrderReturnedToCustomer;
import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.info.Info;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.servers.Server;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;



@Validated
@RequestMapping(
        value = "api/order")
@OpenAPIDefinition(info = @Info(title = "Services pertaining to creating a new order for customers. "),
        servers = {@Server(url="http://localhost:8080", description = "Local server")})
public interface OrdersControllerInterface {

    @Operation(
          summary = "A food order is submitted to the company.",
          description = """
                  
                  Full fields for object are generated by the api application. As such you may reference the
                   example value and schema to see what a completed order object may look like in full but only format your
                   request object mirroring the below sample or undesired results should be expected.  
                  
                  Sample food order object:
                  
                  
                   {
                                       "customer": {
                                           "name": "bill billson",
                                           "email": "billy@bolly.com",
                                           "phoneNumber": "555.555.5959"
                                       },
                                       "order": {
                                           "orderItems": [
                                               {
                                                   "item": {
                                                       "id": 2
                                                   },
                                                   "quantity": 2
                                               },
                                               {
                                                   "item": {
                                                       "id": 12
                                                   },
                                                   "quantity": 1
                                               },
                                               {
                                                   "item": {
                                                       "id": 3
                                                   },
                                                   "quantity": 3
                                               }
                                           ]
                                       }
                                   }
                                   
                    This will return a response containing a order confirmation for the customer.
                    
                    Sample order confirmation: 
                    
                    {
                      "customerName": "bill billson",
                      "orderUid": "NP0DQ",
                      "orderItems": [
                        {
                          "itemName": "golden pound",
                          "unitPrice": 5.3,
                          "quantity": 2,
                          "total": 10.6
                        },
                        {
                          "itemName": "iced tea",
                          "unitPrice": 2,
                          "quantity": 1,
                          "total": 2
                        },
                        {
                          "itemName": "cola",
                          "unitPrice": 1,
                          "quantity": 3,
                          "total": 3
                        }
                      ],
                      "orderTotal": 15.6
                    }
                   """,
            responses = {
                    @ApiResponse(
                            responseCode = "201",
                            description = "An order is created."),
                    @ApiResponse(
                                    responseCode = "400",
                                    description = "Request parameters invalid. Check formatting."),
                    @ApiResponse(
                            responseCode = "500",
                            description = "An unplanned error occured."),
            }
    )

    @ResponseStatus(code = HttpStatus.CREATED)
    @PostMapping("/checkout")
    OrderReturnedToCustomer createOrder(@RequestBody NewOrder order) throws Exception;
}